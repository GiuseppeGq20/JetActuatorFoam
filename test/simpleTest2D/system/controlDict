/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1912                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//application     rhoPimpleFoam;
application     myrhoPimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         0.1;

deltaT          1e-5;

writeControl    adjustable;

writeInterval   0.01;

purgeWrite      0;

writeFormat     binary;

writePrecision   8;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep    yes;

maxCo           0.6;

functions
{
    //#includeFunc MachNo
    //#includeFunc solverInfo
    //#includeFunc calcB
    //#includeFunc wallShearStress
   
}

OptimisationSwitches
{
    // Trap floating point exception.
    // Can override with FOAM_SIGFPE env variable (true|false)
    trapFpe         true;

    // Initialization malloced memory to NaN.
    // Can override with FOAM_SETNAN env variable (true|false)
    setNaN          0;

    // Force dumping (at next timestep) upon signal (-1 to disable)
    // See 'kill -l' for signal numbers (eg, 10=USR1, 12=USR2)
    writeNowSignal          -1; // 10;

    // Force dumping (at next timestep) upon signal (-1 to disable) and exit
    stopAtWriteNowSignal    -1;

    //- Use dlclose() when clearing the dlLibraryTable.

}

DebugSwitches
{
    fluidThermo 1;
    psiThermo   1;
    basicMixture 1;

    cell        1;
    cellList    1;
    cellLooper  1;

    constant    1;

    dictionary  1;
    
    empty       1;

    exponential 1;
    general     1;
    generic     1;
    meshObject  0;
    none        1;
    obj         0;
    objectRegistry 0;
    patch       0;
    pefectInterface 1;
    powerLaw    1;
    pureMixture<myconstTransport<thermo<myhConstThermo<myperfectGas>>>> 0; //not working
    raw         1;
    regIOobject 0;
    scalarField 0;
    stl         1;
    surfaceScalarField 0;
    surfaceScalarField::Internal 1;
    surfaces    1;
    time        1;
    totalPressure 1;
    totalTemperature 1;
    value       1;
    volScalarField 0;
    volScalarField::Internal 1;
    volumeExpr  1;
    waveTransmissive 1;
    zeroGradient 1;
}

libs (
"libmyfluidThermophysicalModels.so"
"libmyspecie.so"
);
// ************************************************************************* //
