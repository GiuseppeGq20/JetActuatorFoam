/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

//Utilizziamo un modo parametrico di fare la mesh nelle nostre analisi
//Definisco allora alcune variabili che caratterizzano la nostra geometria e mesh


//Definisco variabili della geometria
//- Half angle of wedge in degrees
halfAngle 2.5;
//- Radius of nozzle [m]
radius 0.0005;
// Length of nozzle [m]
Ln 0.002;

// Length and Radious of external domain [m]
Ld 0.003;
Rd 0.006;

// Length and Radious of cavity [m]
Rc 0.006;
Lc -0.003;

//Calcolo dati importanti per la nostra mesh e geometria
radHalfAngle    #calc "degToRad($halfAngle)";
yn              #calc "$radius*cos($radHalfAngle)";		//calcolo coord altezza arco nozzle (punti 1-2-5-6-9-10-13-14)
zn              #calc "$radius*sin($radHalfAngle)";		//calcolo coord larghezza arco nozzle (punti 1-2-5-6-9-10-13-14)
zc              #calc "$Rc*sin($radHalfAngle)";			//calcolo coord altezza arco cavity (punti 16-17-22-23)
yc              #calc "$Rc*cos($radHalfAngle)";			//calcolo coord larghezza arco cavity (punti 16-17-22-23)
zd              #calc "$Rd*sin($radHalfAngle)";			//calcolo coord altezza arco esterno (punti 18-19-20-21)
yd              #calc "$Rd*cos($radHalfAngle)";			//calcolo coord larghezza arco esterno (punti 18-19-20-21)


vertices
(
	//faccia in nozzle
    (#calc "-$Ln/2"	0.0		0.0	)	//0
    (#calc "-$Ln/2"	$yn		#calc "-$zn")	//1
    (#calc "-$Ln/2"	$yn		$zn	)	//2
    (#calc "-$Ln/2"	0.0 		0.0	)	//3
	//Faccia out nozzle
    (#calc "$Ln/2"	0.0		0.0	)	//4
    (#calc "$Ln/2"	$yn		#calc "-$zn")	//5
    (#calc "$Ln/2"	$yn		$zn	)	//6
    (#calc "$Ln/2"	0.0 		0.0	)	//7


	//faccia in dom. esterno
    ($Ld	0.0		0.0	)	//8
    ($Ld	$yn		#calc "-$zn")	//9
    ($Ld	$yn		$zn	)	//10
    ($Ld	0.0 	0.0	)	//11
	//faccia out dom. esterno
    ($Lc	0.0		0.0	)	//12
    ($Lc	$yn		#calc "-$zn")	//13
    ($Lc	$yn		$zn	)	//14
    ($Lc	0.0 	0.0	)	//15


	//punti raggio esterno interfaccia cavity-nozzle
    (#calc "-$Ln/2"	$yc		#calc "-$zc")	//16
	(#calc "-$Ln/2"	$yc		$zc	)	//17
	//punti raggio esterno interfaccia nozzle-dom. esterno
    (#calc "$Ln/2"	$yd		#calc "-$zd")	//18
    (#calc "$Ln/2"	$yd 	$zd	)	//19
	//punti raggio esterno uscita dom. esterno
    ($Ld	$yd		#calc "-$zd")	//20
    ($Ld	$yd 	$zd	)	//21
	//punti raggio esterno entrata cavity
    ($Lc	$yc		#calc "-$zc")	//22
    ($Lc	$yc 	$zc	)	//23	
);

Nyn 60; //vertical tre elettrodi
Nyng 0.4;

Nxn 180; //orizzontale tre elettrodi


Nxc 60;
Nxcg 8;
Nxcgi 0.125;

Nyc 80;
Nycg 50;


blocks
(   hex (13 1 16 22 14 2 17 23)	        ($Nxc $Nyc 1)	simpleGrading ($Nxcgi $Nycg 1)		//1
      hex (1 5 18 16 2 6 19 17)	                ($Nxn $Nyc 1)	simpleGrading (1 $Nycg 1)		//1
      hex (0 4 5 1 3 7 6 2)			($Nxn $Nyn 1)	simpleGrading (1 $Nyng 1)		//3
     hex (5 9 20 18 6 10 21 19)	        ($Nxc $Nyc 1)	simpleGrading ($Nxcg $Nycg 1)		//4
	   
);

edges
(
        arc 1 2		(0.0		$radius		0.0)
        arc 5 6		(#calc "$Ln/2"	$radius		0.0)
	arc 9 10	($Ld 		$radius		0.0)
       arc 13 14	($Lc		$radius		0.0)
	arc 16 17	(0.0		$Rc			0.0)
	arc 18 19	(#calc "$Ln/2"	$Rd			0.0)
	arc 20 21	($Ld		$Rd			0.0)
	arc 22 23	($Lc		$Rc			0.0)

);

boundary
(

    
    electrodFaceBot
    {
        type wall;
        faces
        (

	
		(5 6 4 7)
	
			
        );
    }	

    electrodFaceTop
    {
        type wall;
        faces
        (

		(1 2 0 3)
		
        );
    }	

    electrodSides
    {
        type wall;
        faces
        (

		(13 14 2 1)
		(5 6 10 9)
		
        );
    }

   /* axis
    {
        type symmetry;
        faces
        (

		(0 3 4 7)
		
        );
    }*/	
    
    outlet
    {
        type patch;
        faces
        (


		(13 14 23 22)
		(22 23 17 16)
		(16 17 19 18)
		(18 19 21 20)
		(10 9 20 21)

        );
    }	
    back
    {
        type wedge;
        faces
        (
			(0 1 5 4)
			(18 16 1 5)
			(1 13 22 16)
			(9 5 18 20) 
    );
    }	

    front
    {
        type wedge;
        faces
        (

			(17 19 6 2)
			(14 2 17 23)
			(2 6 7 3)
			(6 10 21 19)
			
    );
    }	

);





mergePatchPairs
(
);

// ************************************************************************* //
